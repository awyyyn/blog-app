// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  username      String?   @unique
  email         String    @unique
  firstname     String
  lastname      String
  profile       String?   @db.String 
  comments      Comment[] @relation(name: "UserComment")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  followedBy    User[]   @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs String[] @db.ObjectId
  following     User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs  String[] @db.ObjectId
  
  // @@unique([ userFollow ])
   
  Post Post[] @relation(name: "PostAuthor")
   

  saved_post_ids String[] @db.ObjectId
  saved_post Post[] @relation(name: "SavedPosts", references: [id], fields: [saved_post_ids])

  liked_posts_ids String[] @db.ObjectId
  liked_posts Post[] @relation(name: "LikedPosts", fields: [liked_posts_ids], references: [id])

  notification Notification[] @relation(name: "Recipent")
  

}

  
 

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  comments    Comment[] 
  // saveBy      SavedPost[] @relation(name: "savedPost")
  title       String
  description String
  likes       Int?      @default(0) // to remove
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  authorId String @db.ObjectId
  author   User   @relation(name: "PostAuthor", fields: [authorId], references: [id])
  
  saved_by_ids String[] @db.ObjectId
  saved_by User[]  @relation(name: "SavedPosts", fields: [saved_by_ids], references: [id])
 
  liked_by_ids String[] @db.ObjectId
  liked_by User[] @relation(name: "LikedPosts", fields: [liked_by_ids], references: [id])
   
  
  notification Notification[] @relation(name: "PostNotification")
}



model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(name: "UserComment", fields: [userId], references: [id] )
  createdAt DateTime @default(now()) 
}

enum NotificationType {
  POST
  COMMENT
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  recipent_id String @db.ObjectId 
  recipent User @relation(name: "Recipent", fields: [recipent_id], references: [id])
  
  post_id String @db.ObjectId 
  post Post @relation(name: "PostNotification", fields: [post_id], references: [id])
    

  isRead Boolean @default(false)
  type NotificationType
  createdAt DateTime @default(now()) 
}